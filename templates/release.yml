# templates/release.yml

parameters:
  - name: projectName
    type: string
    default: 'spring_app'
  - name: jarFile
    type: string
    default: 'build/libs/spring_app-0.0.1-SNAPSHOT.jar'
  - name: githubUser
    type: string
    default: 'Ronnie811'
  - name: githubRepo
    type: string
    default: 'springboot_ci_cd'
  - name: githubOrg
    type: string
    default: 'roni-cadena81'

jobs:
  - job: release
    displayName: Publish JAR to GitHub Packages
    pool:
      vmImage: ubuntu-latest
    steps:
      - checkout: self
      
      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          artifactName: 'jar-artifacts'
          downloadPath: '$(System.ArtifactsDirectory)'
        displayName: 'Download JAR Artifacts'

      - script: |
          echo "Setting up JAR file location..."
          mkdir -p build/libs
          cp "$(System.ArtifactsDirectory)/jar-artifacts/"*.jar build/libs/
          ls -la build/libs/
          
          echo "Auto-detecting main JAR file..."
          # Buscar el JAR más grande (excluyendo los -plain.jar)
          MAIN_JAR=$(find build/libs -name "*.jar" -not -name "*-plain.jar" | head -1)
          
          if [ -n "$MAIN_JAR" ]; then
            echo "Main JAR detected: $MAIN_JAR"
            ls -la "$MAIN_JAR"
            
            # Actualizar la variable para usar el JAR detectado
            echo "##vso[task.setvariable variable=DETECTED_JAR_FILE]$MAIN_JAR"
          else
            echo "No main JAR file found, using specified parameter: ${{ parameters.jarFile }}"
            if [ -f "${{ parameters.jarFile }}" ]; then
              echo "JAR file found: ${{ parameters.jarFile }}"
              ls -la "${{ parameters.jarFile }}"
              echo "##vso[task.setvariable variable=DETECTED_JAR_FILE]${{ parameters.jarFile }}"
            else
              echo "JAR file not found, listing available files:"
              find . -name "*.jar" -type f
              exit 1
            fi
          fi
        displayName: 'Setup JAR File'

      - script: |
          echo "Publishing to GitHub Packages..."
          
          # Usar el JAR detectado o el parámetro especificado
          JAR_FILE="${DETECTED_JAR_FILE:-${{ parameters.jarFile }}}"
          
          # Verificar que el archivo JAR existe
          if [ ! -f "$JAR_FILE" ]; then
            echo "ERROR: JAR file not found at $JAR_FILE"
            echo "Available files:"
            find . -name "*.jar" -type f
            exit 1
          fi

          echo "[INFO] Configuring Maven settings"
          mkdir -p ~/.m2

          cat <<EOF > ~/.m2/settings.xml
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>github</id>
                <username>${{ parameters.githubUser }}</username>
                <password>${GITHUB_TOKEN}</password>
              </server>
            </servers>
          </settings>
          EOF

          echo "[INFO] Deploying to GitHub Packages"
          echo "File: $JAR_FILE"
          echo "Repository: https://maven.pkg.github.com/${{ parameters.githubOrg }}/${{ parameters.githubRepo }}"
          
          mvn deploy:deploy-file \
            -DgroupId=com.${{ parameters.githubOrg }} \
            -DartifactId=${{ parameters.projectName }} \
            -Dversion=0.0.1-SNAPSHOT \
            -Dpackaging=jar \
            -Dfile="$JAR_FILE" \
            -DrepositoryId=github \
            -Durl=https://maven.pkg.github.com/${{ parameters.githubOrg }}/${{ parameters.githubRepo }} \
            -X
        displayName: 'Publish JAR to GitHub Packages'
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)